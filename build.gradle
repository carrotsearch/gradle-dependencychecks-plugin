plugins {
  alias(deps.plugins.gradle.publish)
  alias(deps.plugins.spotless)
  id 'groovy'
  id 'signing'
}

def humanName = 'dependencychecks-plugin'
project.group = 'com.carrotsearch.gradle.dependencychecks'
project.version = '0.0.6'
project.description = 'Dependency checker and lock file aggregator'

repositories {
  mavenCentral()
}

dependencies {
  implementation deps.jackson

  testImplementation deps.junit.jupiter
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")

  testImplementation deps.assertj

  testImplementation platform("org.spockframework:spock-bom:2.3-groovy-3.0")
  testImplementation "org.spockframework:spock-core"
}

allprojects {
  apply plugin: 'idea'

  idea {
    module {
      outputDir file('build/idea/classes/main')
      testOutputDir file('build/idea/classes/test')
      downloadSources = true
    }
  }
}

gradlePlugin {
  website = 'https://github.com/carrotsearch/gradle-dependencychecks-plugin'
  vcsUrl = 'https://github.com/carrotsearch/gradle-dependencychecks-plugin.git'
  plugins {
    dependencychecks {
      id = project.group
      implementationClass = 'com.carrotsearch.gradle.dependencychecks.DependencyChecksPlugin'
      displayName = humanName
      description = project.description
      tags = [
        'utility'
      ]
    }
  }
}

java {
  sourceCompatibility = 17
  targetCompatibility = 17
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  options.encoding = "UTF-8"
}

tasks.named('test', Test) {
  useJUnitPlatform()
}

publishing {
  repositories {
    maven {
      name = 'staging'
      url = project.layout.buildDirectory.dir("m2-local")
    }

    maven {
      name = 'sonatype'
      url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"

      credentials {
        if (project.hasProperty('nexusUsername')) {
          username project.nexusUsername
        }
        if (project.hasProperty('nexusPassword')) {
          password project.nexusPassword
        }
      }
    }
  }

  publications {
    withType(MavenPublication).configureEach {
      pom {
        inceptionYear = "2023"

        name = humanName
        description = project.description
        url = gradlePlugin.website

        licenses {
          license {
            name = 'Apache 2'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        organization {
          name = "Carrot Search s.c."
          url = "https://www.carrotsearch.com"
        }

        developers {
          developer {
            id = 'dawid.weiss'
            name = 'Dawid Weiss'
            email = 'dawid.weiss@carrotsearch.com'
          }
        }

        scm {
          connection = 'scm:git:git@github.com:carrotsearch/gradle-dependencychecks-plugin.git'
          developerConnection = gradlePlugin.vcsUrl
          url = gradlePlugin.website
        }
      }
    }
  }
}

tasks.register("deploy", {
  dependsOn "publishDependencychecksPluginMarkerMavenPublicationToSonatypeRepository",
      "publishPluginMavenPublicationToSonatypeRepository",
      publishPlugins
})

tasks.register("deployStaging", {
  dependsOn "publishDependencychecksPluginMarkerMavenPublicationToStagingRepository",
      "publishPluginMavenPublicationToStagingRepository"
})

spotless {
  java {
    lineEndings 'UNIX'
    endWithNewline()
    googleJavaFormat('1.20.0')
  }

  groovy {
    indentWithSpaces(4)
    importOrder()

    excludeJava()
    greclipse("4.27").configFile rootProject.files(
        'gradle/spotless/spotless.eclipseformat.xml',
        'gradle/spotless/spotless.groovyformat.prefs')
  }

  groovyGradle {
    target '*.gradle', 'gradle/**/*.gradle'

    greclipse("4.27").configFile rootProject.files(
        'gradle/spotless/spotless.eclipseformat.xml',
        'gradle/spotless/spotless.groovyformat.prefs')
  }
}

task tidy() {
  description "Applies formatters and cleanups to sources (if configured)."
  group "verification"

  dependsOn tasks.matching { task -> task.name == "spotlessApply" }
}

check.dependsOn tasks.matching { task -> task.name == "spotlessCheck" }
